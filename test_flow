$ vim MutSkyMcd_buflistfix_ascii_128g_66cap_multi_uniform_20160731.txt

func PerfBasicTest()
	=> Performance/mutilate err := common.InstancedStandardBenchmarkFlow(PerfBasicTest,
		common/bench_workflow InstancedStandardBenchmarkFlow()
			//Generate the unique ID
			//Pass in CLI and compare and normal string path.
			//Loop and Check if JSON Files exit. Pre-Req Check
			//Loop over different test instances
			//Run the Test
			err = StandardSetupFlow(testFlow, fileName)

			StandardSetupFlow()
				//Clients match number of supplied servers?
				//Servers match number of supplied servers?
				//Proxy On or Off?
				//Append the Start Time to the File Name
				//allocate machines
				// Verify all prerequisites for this test are met
				// Check for mock mode
				// Check whether to bypass the job scheduler
				//Launch Servers
				servers, preErr = SetupMultipleServers()
					servers := server.SetupServers()
					//Format the Drive
					err = server.LaunchServers()
						err = servers[serverSizeIndex].Launch()
							server/skyriver func (fc *SkyriverServer) Launch()
								// hostname
								launchLocalServer()
								or
								launchRemoteServer()
									checkoutAndBuild()
										// Checkout source
										//GVM & Checkout
										// Build the source
									err = fc.startRemoteServer()
										// cmd for starting server
				//Create Poller
				poller = CreatePollers()

				//Client Setup
				clients, preErr = SetupMultipleBenchmark()

				// Prepare subject line in case we need to send out notification
				//Setup Proxy
				ProxyInstances, preErr = SetupProxy()

				// Only execute test if the setup phase did not encounter any errors
				// testFLow() is a func() pointer, which is PerfBasicTest in this case
				testErr = testFlow()

				//Release Proxy
				postErr = ReleaseProxy()
				//Release Metrics for skyriver
				metSaveErr := MetricsSaveAndClose()
				or
				postErr, mvErr := TerminateOnly()
				// Options for Server Side Terminate - Terminate&Release, TerminateOnly, ReleaseOnly, DoNothing
				postErr, mvErr := TerminateAndRelease()
				//Append the End Time to the File Name

				//Save Data
				clientStatus := SaveFile()

				//Save aggregated client data results to a file
				aggrResults, aggrErr := aggregateMultiClientResults()
				aggrResultsErr := saveMaptoCSV()

				//Save Metric CSV File
				pollerStatus := SaveMetricCSVFile()
				//Get Drive Logs
				GetDrivelogs(servers)

				// Create JSON representation of client (individual and combined) and poller data and attempt post to ElasticSearch instance, if not in mock mode
				postStdOut, esErr := PerformESPost()
				// Attempt to move test files over to NFS mount
				// Send notification that this test instance is ending
				//Increment Global Instance Index

